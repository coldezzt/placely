// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Placely.Persistence;

#nullable disable

namespace Placely.Main.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ChatUser", b =>
                {
                    b.Property<long>("ChatsId")
                        .HasColumnType("bigint")
                        .HasColumnName("chats_id");

                    b.Property<long>("ParticipantsId")
                        .HasColumnType("bigint")
                        .HasColumnName("participants_id");

                    b.HasKey("ChatsId", "ParticipantsId")
                        .HasName("pk_chat_user");

                    b.HasIndex("ParticipantsId")
                        .HasDatabaseName("ix_chat_user_participants_id");

                    b.ToTable("chat_user", (string)null);
                });

            modelBuilder.Entity("Placely.Domain.Entities.Chat", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("DirectoryName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("directory_name");

                    b.HasKey("Id")
                        .HasName("pk_chats");

                    b.ToTable("chats", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            DirectoryName = "/chat-1-2"
                        },
                        new
                        {
                            Id = 2L,
                            DirectoryName = "/chat-1-3"
                        },
                        new
                        {
                            Id = 3L,
                            DirectoryName = "/chat-2-4"
                        });
                });

            modelBuilder.Entity("Placely.Domain.Entities.Contract", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("FinalizedDocxFileName")
                        .HasColumnType("text")
                        .HasColumnName("finalized_docx_file_name");

                    b.Property<string>("FinalizedPdfFileName")
                        .HasColumnType("text")
                        .HasColumnName("finalized_pdf_file_name");

                    b.Property<long>("ReservationId")
                        .HasColumnType("bigint")
                        .HasColumnName("reservation_id");

                    b.HasKey("Id")
                        .HasName("pk_contracts");

                    b.HasIndex("ReservationId")
                        .IsUnique()
                        .HasDatabaseName("ix_contracts_reservation_id");

                    b.ToTable("contracts", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            ReservationId = 1L
                        },
                        new
                        {
                            Id = 2L,
                            ReservationId = 2L
                        },
                        new
                        {
                            Id = 3L,
                            ReservationId = 3L
                        });
                });

            modelBuilder.Entity("Placely.Domain.Entities.Message", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("AuthorId")
                        .HasColumnType("bigint")
                        .HasColumnName("author_id");

                    b.Property<long>("ChatId")
                        .HasColumnType("bigint")
                        .HasColumnName("chat_id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("file_name");

                    b.HasKey("Id")
                        .HasName("pk_messages");

                    b.HasIndex("AuthorId")
                        .HasDatabaseName("ix_messages_author_id");

                    b.HasIndex("ChatId")
                        .HasDatabaseName("ix_messages_chat_id");

                    b.ToTable("messages", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            AuthorId = 1L,
                            ChatId = 1L,
                            Content = "message 1",
                            Date = new DateTime(2024, 6, 3, 8, 14, 5, 602, DateTimeKind.Utc).AddTicks(704),
                            FileName = ""
                        },
                        new
                        {
                            Id = 2L,
                            AuthorId = 4L,
                            ChatId = 1L,
                            Content = "message 2",
                            Date = new DateTime(2024, 6, 4, 8, 14, 5, 602, DateTimeKind.Utc).AddTicks(713),
                            FileName = ""
                        },
                        new
                        {
                            Id = 3L,
                            AuthorId = 2L,
                            ChatId = 2L,
                            Content = "message with file",
                            Date = new DateTime(2024, 5, 30, 8, 14, 5, 602, DateTimeKind.Utc).AddTicks(715),
                            FileName = "smt.txt"
                        });
                });

            modelBuilder.Entity("Placely.Domain.Entities.Notification", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date")
                        .HasColumnName("date");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<long>("ReceiverId")
                        .HasColumnType("bigint")
                        .HasColumnName("receiver_id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.HasKey("Id")
                        .HasName("pk_notifications");

                    b.HasIndex("ReceiverId")
                        .HasDatabaseName("ix_notifications_receiver_id");

                    b.ToTable("notifications", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Content = "This is some helpful information",
                            Date = new DateOnly(2024, 6, 5),
                            IsDeleted = false,
                            ReceiverId = 2L,
                            Title = "Info"
                        },
                        new
                        {
                            Id = 2L,
                            Content = "This is some helpful information",
                            Date = new DateOnly(2024, 6, 5),
                            IsDeleted = false,
                            ReceiverId = 2L,
                            Title = "Info"
                        },
                        new
                        {
                            Id = 3L,
                            Content = "This is already readed some helpful information",
                            Date = new DateOnly(2024, 6, 5),
                            IsDeleted = false,
                            ReceiverId = 3L,
                            Title = "Info"
                        },
                        new
                        {
                            Id = 4L,
                            Content = "This is already readed some helpful information",
                            Date = new DateOnly(2024, 6, 5),
                            IsDeleted = true,
                            ReceiverId = 3L,
                            Title = "Info"
                        },
                        new
                        {
                            Id = 5L,
                            Content = "This is request on reservation",
                            Date = new DateOnly(2024, 6, 5),
                            IsDeleted = false,
                            ReceiverId = 4L,
                            Title = "Request"
                        },
                        new
                        {
                            Id = 6L,
                            Content = "This is readed request on reservation",
                            Date = new DateOnly(2024, 6, 5),
                            IsDeleted = true,
                            ReceiverId = 5L,
                            Title = "Request"
                        });
                });

            modelBuilder.Entity("Placely.Domain.Entities.PreviousPassword", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("password");

                    b.Property<long>("TenantId")
                        .HasColumnType("bigint")
                        .HasColumnName("tenant_id");

                    b.HasKey("Id")
                        .HasName("pk_previous_passwords");

                    b.HasIndex("TenantId")
                        .HasDatabaseName("ix_previous_passwords_tenant_id");

                    b.ToTable("previous_passwords", (string)null);
                });

            modelBuilder.Entity("Placely.Domain.Entities.PriceList", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<decimal>("PeriodLong")
                        .HasColumnType("numeric")
                        .HasColumnName("period_long");

                    b.Property<decimal>("PeriodMedium")
                        .HasColumnType("numeric")
                        .HasColumnName("period_medium");

                    b.Property<decimal>("PeriodShort")
                        .HasColumnType("numeric")
                        .HasColumnName("period_short");

                    b.Property<long>("PropertyId")
                        .HasColumnType("bigint")
                        .HasColumnName("property_id");

                    b.HasKey("Id")
                        .HasName("pk_prices");

                    b.ToTable("prices", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            PeriodLong = 11m,
                            PeriodMedium = 111m,
                            PeriodShort = 1111m,
                            PropertyId = 0L
                        },
                        new
                        {
                            Id = 2L,
                            PeriodLong = 22m,
                            PeriodMedium = 222m,
                            PeriodShort = 2222m,
                            PropertyId = 0L
                        },
                        new
                        {
                            Id = 3L,
                            PeriodLong = 33m,
                            PeriodMedium = 333m,
                            PeriodShort = 3333m,
                            PropertyId = 0L
                        });
                });

            modelBuilder.Entity("Placely.Domain.Entities.Property", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("address");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<long>("OwnerId")
                        .HasColumnType("bigint")
                        .HasColumnName("owner_id");

                    b.Property<long>("PriceListId")
                        .HasColumnType("bigint")
                        .HasColumnName("price_list_id");

                    b.Property<DateTime>("PublicationDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("publication_date");

                    b.Property<double>("Rating")
                        .HasColumnType("double precision")
                        .HasColumnName("rating");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.HasKey("Id")
                        .HasName("pk_properties");

                    b.HasIndex("OwnerId")
                        .HasDatabaseName("ix_properties_owner_id");

                    b.HasIndex("PriceListId")
                        .IsUnique()
                        .HasDatabaseName("ix_properties_price_list_id");

                    b.ToTable("properties", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Address = "Flat property address",
                            Description = "Flat property description",
                            OwnerId = 1L,
                            PriceListId = 1L,
                            PublicationDate = new DateTime(2024, 6, 4, 8, 14, 5, 602, DateTimeKind.Utc).AddTicks(482),
                            Rating = 0.0,
                            Type = 2
                        },
                        new
                        {
                            Id = 2L,
                            Address = "Hostel property address",
                            Description = "Hostel property description",
                            OwnerId = 1L,
                            PriceListId = 2L,
                            PublicationDate = new DateTime(2024, 5, 6, 8, 14, 5, 602, DateTimeKind.Utc).AddTicks(493),
                            Rating = 0.0,
                            Type = 0
                        },
                        new
                        {
                            Id = 3L,
                            Address = "Villa property address",
                            Description = "Villa property description",
                            OwnerId = 2L,
                            PriceListId = 3L,
                            PublicationDate = new DateTime(2024, 4, 6, 8, 14, 5, 602, DateTimeKind.Utc).AddTicks(495),
                            Rating = 0.0,
                            Type = 3
                        });
                });

            modelBuilder.Entity("Placely.Domain.Entities.Reservation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("ContractId")
                        .HasColumnType("bigint")
                        .HasColumnName("contract_id");

                    b.Property<DateTime>("CreationDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("creation_date_time");

                    b.Property<string>("DeclineReason")
                        .HasColumnType("text")
                        .HasColumnName("decline_reason");

                    b.Property<TimeSpan>("Duration")
                        .HasColumnType("interval")
                        .HasColumnName("duration");

                    b.Property<DateTime>("EntryDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("entry_date");

                    b.Property<byte>("GuestsAmount")
                        .HasColumnType("smallint")
                        .HasColumnName("guests_amount");

                    b.Property<decimal?>("PaymentAmount")
                        .HasColumnType("numeric")
                        .HasColumnName("payment_amount");

                    b.Property<string>("PaymentFrequency")
                        .HasColumnType("text")
                        .HasColumnName("payment_frequency");

                    b.Property<long>("PropertyId")
                        .HasColumnType("bigint")
                        .HasColumnName("property_id");

                    b.Property<int?>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.HasKey("Id")
                        .HasName("pk_reservations");

                    b.HasIndex("PropertyId")
                        .HasDatabaseName("ix_reservations_property_id");

                    b.ToTable("reservations", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreationDateTime = new DateTime(2024, 5, 16, 8, 14, 5, 602, DateTimeKind.Utc).AddTicks(545),
                            Duration = new TimeSpan(37, 0, 0, 0, 0),
                            EntryDate = new DateTime(2024, 5, 29, 8, 14, 5, 602, DateTimeKind.Utc).AddTicks(548),
                            GuestsAmount = (byte)3,
                            PaymentAmount = 250000m,
                            PaymentFrequency = "2 раза в год",
                            PropertyId = 1L,
                            Status = 2
                        },
                        new
                        {
                            Id = 2L,
                            CreationDateTime = new DateTime(2024, 6, 2, 8, 14, 5, 602, DateTimeKind.Utc).AddTicks(560),
                            Duration = new TimeSpan(14, 0, 0, 0, 0),
                            EntryDate = new DateTime(2024, 6, 5, 8, 14, 5, 602, DateTimeKind.Utc).AddTicks(561),
                            GuestsAmount = (byte)1,
                            PaymentAmount = 3000m,
                            PaymentFrequency = "2 раза в неделю",
                            PropertyId = 2L,
                            Status = 2
                        },
                        new
                        {
                            Id = 3L,
                            CreationDateTime = new DateTime(2024, 6, 2, 8, 14, 5, 602, DateTimeKind.Utc).AddTicks(562),
                            Duration = new TimeSpan(3, 0, 0, 0, 0),
                            EntryDate = new DateTime(2024, 6, 3, 8, 14, 5, 602, DateTimeKind.Utc).AddTicks(563),
                            GuestsAmount = (byte)2,
                            PaymentAmount = 40000m,
                            PaymentFrequency = "1 раз в месяц",
                            PropertyId = 3L,
                            Status = 2
                        },
                        new
                        {
                            Id = 4L,
                            CreationDateTime = new DateTime(2024, 6, 5, 8, 14, 5, 602, DateTimeKind.Utc).AddTicks(566),
                            Duration = new TimeSpan(10, 0, 0, 0, 0),
                            EntryDate = new DateTime(2024, 6, 9, 8, 14, 5, 602, DateTimeKind.Utc).AddTicks(566),
                            GuestsAmount = (byte)3,
                            PropertyId = 2L,
                            Status = 0
                        },
                        new
                        {
                            Id = 5L,
                            CreationDateTime = new DateTime(2024, 5, 26, 8, 14, 5, 602, DateTimeKind.Utc).AddTicks(572),
                            DeclineReason = "too many guests",
                            Duration = new TimeSpan(10, 0, 0, 0, 0),
                            EntryDate = new DateTime(2024, 6, 9, 8, 14, 5, 602, DateTimeKind.Utc).AddTicks(572),
                            GuestsAmount = (byte)34,
                            PropertyId = 3L,
                            Status = 3
                        },
                        new
                        {
                            Id = 6L,
                            CreationDateTime = new DateTime(2024, 5, 26, 8, 14, 5, 602, DateTimeKind.Utc).AddTicks(575),
                            Duration = new TimeSpan(10, 0, 0, 0, 0),
                            EntryDate = new DateTime(2024, 6, 9, 8, 14, 5, 602, DateTimeKind.Utc).AddTicks(576),
                            GuestsAmount = (byte)2,
                            PropertyId = 3L,
                            Status = 1
                        });
                });

            modelBuilder.Entity("Placely.Domain.Entities.Review", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("AuthorId")
                        .HasColumnType("bigint")
                        .HasColumnName("author_id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date");

                    b.Property<long>("PropertyId")
                        .HasColumnType("bigint")
                        .HasColumnName("property_id");

                    b.Property<double>("Rating")
                        .HasColumnType("double precision")
                        .HasColumnName("rating");

                    b.HasKey("Id")
                        .HasName("pk_reviews");

                    b.HasIndex("AuthorId")
                        .HasDatabaseName("ix_reviews_author_id");

                    b.HasIndex("PropertyId")
                        .HasDatabaseName("ix_reviews_property_id");

                    b.ToTable("reviews", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            AuthorId = 1L,
                            Content = "review 1",
                            Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PropertyId = 1L,
                            Rating = 1.0
                        },
                        new
                        {
                            Id = 2L,
                            AuthorId = 2L,
                            Content = "review 2",
                            Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PropertyId = 2L,
                            Rating = 2.0
                        },
                        new
                        {
                            Id = 3L,
                            AuthorId = 3L,
                            Content = "review 3",
                            Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PropertyId = 3L,
                            Rating = 3.0
                        },
                        new
                        {
                            Id = 4L,
                            AuthorId = 4L,
                            Content = "review 4",
                            Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PropertyId = 1L,
                            Rating = 4.0
                        },
                        new
                        {
                            Id = 5L,
                            AuthorId = 5L,
                            Content = "review 5",
                            Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PropertyId = 2L,
                            Rating = 5.0
                        });
                });

            modelBuilder.Entity("Placely.Domain.Entities.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("About")
                        .HasColumnType("text")
                        .HasColumnName("about");

                    b.Property<string>("ContactAddress")
                        .HasColumnType("text")
                        .HasColumnName("contact_address");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<bool>("IsAdditionalRegistrationRequired")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_additional_registration_required");

                    b.Property<bool>("IsTwoFactorEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_two_factor_enabled");

                    b.Property<string>("ManualEntryKey")
                        .HasColumnType("text")
                        .HasColumnName("manual_entry_key");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("password");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("phone_number");

                    b.Property<string>("QrImageUrl")
                        .HasColumnType("text")
                        .HasColumnName("qr_image_url");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("text")
                        .HasColumnName("refresh_token");

                    b.Property<DateTime>("RefreshTokenExpirationDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("refresh_token_expiration_date");

                    b.Property<string>("TwoFactorAccountSecretKey")
                        .HasColumnType("text")
                        .HasColumnName("two_factor_account_secret_key");

                    b.Property<int?>("UserRole")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1)
                        .HasColumnName("user_role");

                    b.Property<string>("Work")
                        .HasColumnType("text")
                        .HasColumnName("work");

                    b.HasKey("Id")
                        .HasName("pk_tenants");

                    b.ToTable("tenants", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            About = "I'm test tenant 1",
                            Email = "test.tenant.1@email.domen",
                            IsAdditionalRegistrationRequired = false,
                            IsTwoFactorEnabled = false,
                            Name = "Test tenant 1",
                            Password = "test.tenant.1@email.domen",
                            PhoneNumber = "111 1111 11 11",
                            RefreshTokenExpirationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Work = "I'm working nowhere"
                        },
                        new
                        {
                            Id = 2L,
                            About = "I'm test tenant 2",
                            Email = "test.tenant.2@email.domen",
                            IsAdditionalRegistrationRequired = false,
                            IsTwoFactorEnabled = false,
                            Name = "Test tenant 2",
                            Password = "test.tenant.2@email.domen",
                            PhoneNumber = "222 2222 22 22",
                            RefreshTokenExpirationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Work = "I'm working nowhere"
                        },
                        new
                        {
                            Id = 3L,
                            About = "I'm test tenant 3",
                            Email = "test.tenant.3@email.domen",
                            IsAdditionalRegistrationRequired = false,
                            IsTwoFactorEnabled = false,
                            Name = "Test tenant 3",
                            Password = "test.tenant.3@email.domen",
                            PhoneNumber = "333 3333 33 33",
                            RefreshTokenExpirationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Work = "I'm working nowhere"
                        },
                        new
                        {
                            Id = 4L,
                            About = "I'm test landlord 1",
                            Email = "test.landlord.1@email.domen",
                            IsAdditionalRegistrationRequired = false,
                            IsTwoFactorEnabled = false,
                            Name = "Test landlord 1",
                            Password = "test.landlord.1@email.domen",
                            PhoneNumber = "111 1111 11 11",
                            RefreshTokenExpirationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Work = "I'm working here"
                        },
                        new
                        {
                            Id = 5L,
                            About = "I'm test landlord 2",
                            Email = "test.landlord.2@email.domen",
                            IsAdditionalRegistrationRequired = false,
                            IsTwoFactorEnabled = false,
                            Name = "Test landlord 2",
                            Password = "test.landlord.2@email.domen",
                            PhoneNumber = "222 2222 22 22",
                            RefreshTokenExpirationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Work = "I'm working here"
                        },
                        new
                        {
                            Id = 6L,
                            About = "I'm test landlord 3",
                            Email = "test.landlord.3@email.domen",
                            IsAdditionalRegistrationRequired = false,
                            IsTwoFactorEnabled = false,
                            Name = "Test landlord 3",
                            Password = "test.landlord.3@email.domen",
                            PhoneNumber = "333 3333 33 33",
                            RefreshTokenExpirationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Work = "I'm working here"
                        });
                });

            modelBuilder.Entity("PropertyUser", b =>
                {
                    b.Property<long>("FavouritesId")
                        .HasColumnType("bigint")
                        .HasColumnName("favourites_id");

                    b.Property<long>("FavouritesId1")
                        .HasColumnType("bigint")
                        .HasColumnName("favourites_id1");

                    b.HasKey("FavouritesId", "FavouritesId1")
                        .HasName("pk_property_user");

                    b.HasIndex("FavouritesId1")
                        .HasDatabaseName("ix_property_user_favourites_id1");

                    b.ToTable("property_user", (string)null);
                });

            modelBuilder.Entity("ReservationUser", b =>
                {
                    b.Property<long>("ParticipantsId")
                        .HasColumnType("bigint")
                        .HasColumnName("participants_id");

                    b.Property<long>("ReservationsId")
                        .HasColumnType("bigint")
                        .HasColumnName("reservations_id");

                    b.HasKey("ParticipantsId", "ReservationsId")
                        .HasName("pk_reservation_user");

                    b.HasIndex("ReservationsId")
                        .HasDatabaseName("ix_reservation_user_reservations_id");

                    b.ToTable("reservation_user", (string)null);
                });

            modelBuilder.Entity("ChatUser", b =>
                {
                    b.HasOne("Placely.Domain.Entities.Chat", null)
                        .WithMany()
                        .HasForeignKey("ChatsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_chat_user_chats_chats_id");

                    b.HasOne("Placely.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("ParticipantsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_chat_user_tenants_participants_id");
                });

            modelBuilder.Entity("Placely.Domain.Entities.Contract", b =>
                {
                    b.HasOne("Placely.Domain.Entities.Reservation", "Reservation")
                        .WithOne("Contract")
                        .HasForeignKey("Placely.Domain.Entities.Contract", "ReservationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_contracts_reservations_reservation_id");

                    b.Navigation("Reservation");
                });

            modelBuilder.Entity("Placely.Domain.Entities.Message", b =>
                {
                    b.HasOne("Placely.Domain.Entities.User", "Author")
                        .WithMany("Messages")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_messages_tenants_author_id");

                    b.HasOne("Placely.Domain.Entities.Chat", "Chat")
                        .WithMany("Messages")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_messages_chats_chat_id");

                    b.Navigation("Author");

                    b.Navigation("Chat");
                });

            modelBuilder.Entity("Placely.Domain.Entities.Notification", b =>
                {
                    b.HasOne("Placely.Domain.Entities.User", "Receiver")
                        .WithMany("Notifications")
                        .HasForeignKey("ReceiverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_notifications_tenants_receiver_id");

                    b.Navigation("Receiver");
                });

            modelBuilder.Entity("Placely.Domain.Entities.PreviousPassword", b =>
                {
                    b.HasOne("Placely.Domain.Entities.User", "User")
                        .WithMany("PreviousPasswords")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_previous_passwords_tenants_tenant_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Placely.Domain.Entities.Property", b =>
                {
                    b.HasOne("Placely.Domain.Entities.User", "Owner")
                        .WithMany("OwnedProperties")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_properties_tenants_owner_id");

                    b.HasOne("Placely.Domain.Entities.PriceList", "PriceList")
                        .WithOne("Property")
                        .HasForeignKey("Placely.Domain.Entities.Property", "PriceListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_properties_prices_price_list_id");

                    b.Navigation("Owner");

                    b.Navigation("PriceList");
                });

            modelBuilder.Entity("Placely.Domain.Entities.Reservation", b =>
                {
                    b.HasOne("Placely.Domain.Entities.Property", "Property")
                        .WithMany("Reservations")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_reservations_properties_property_id");

                    b.Navigation("Property");
                });

            modelBuilder.Entity("Placely.Domain.Entities.Review", b =>
                {
                    b.HasOne("Placely.Domain.Entities.User", "Author")
                        .WithMany("Reviews")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_reviews_tenants_author_id");

                    b.HasOne("Placely.Domain.Entities.Property", "Property")
                        .WithMany("Reviews")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_reviews_properties_property_id");

                    b.Navigation("Author");

                    b.Navigation("Property");
                });

            modelBuilder.Entity("PropertyUser", b =>
                {
                    b.HasOne("Placely.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("FavouritesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_property_user_tenants_favourites_id");

                    b.HasOne("Placely.Domain.Entities.Property", null)
                        .WithMany()
                        .HasForeignKey("FavouritesId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_property_user_properties_favourites_id1");
                });

            modelBuilder.Entity("ReservationUser", b =>
                {
                    b.HasOne("Placely.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("ParticipantsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_reservation_user_tenants_participants_id");

                    b.HasOne("Placely.Domain.Entities.Reservation", null)
                        .WithMany()
                        .HasForeignKey("ReservationsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_reservation_user_reservations_reservations_id");
                });

            modelBuilder.Entity("Placely.Domain.Entities.Chat", b =>
                {
                    b.Navigation("Messages");
                });

            modelBuilder.Entity("Placely.Domain.Entities.PriceList", b =>
                {
                    b.Navigation("Property")
                        .IsRequired();
                });

            modelBuilder.Entity("Placely.Domain.Entities.Property", b =>
                {
                    b.Navigation("Reservations");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("Placely.Domain.Entities.Reservation", b =>
                {
                    b.Navigation("Contract");
                });

            modelBuilder.Entity("Placely.Domain.Entities.User", b =>
                {
                    b.Navigation("Messages");

                    b.Navigation("Notifications");

                    b.Navigation("OwnedProperties");

                    b.Navigation("PreviousPasswords");

                    b.Navigation("Reviews");
                });
#pragma warning restore 612, 618
        }
    }
}
