// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Placely.Persistence;

#nullable disable

namespace Placely.Main.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240504092959_property_fixes")]
    partial class property_fixes
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Placely.Data.Entities.Chat", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("DirectoryName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("directory_name");

                    b.Property<long>("FirstUserId")
                        .HasColumnType("bigint")
                        .HasColumnName("first_user_id");

                    b.Property<long?>("LandlordId")
                        .HasColumnType("bigint")
                        .HasColumnName("landlord_id");

                    b.Property<long>("SecondUserId")
                        .HasColumnType("bigint")
                        .HasColumnName("second_user_id");

                    b.Property<long?>("TenantId")
                        .HasColumnType("bigint")
                        .HasColumnName("tenant_id");

                    b.HasKey("Id")
                        .HasName("pk_chats");

                    b.HasIndex("FirstUserId")
                        .HasDatabaseName("ix_chats_first_user_id");

                    b.HasIndex("LandlordId")
                        .HasDatabaseName("ix_chats_landlord_id");

                    b.HasIndex("SecondUserId")
                        .HasDatabaseName("ix_chats_second_user_id");

                    b.HasIndex("TenantId")
                        .HasDatabaseName("ix_chats_tenant_id");

                    b.ToTable("chats", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            DirectoryName = "/chat-t-1-l-1",
                            FirstUserId = 1L,
                            SecondUserId = 1L
                        },
                        new
                        {
                            Id = 2L,
                            DirectoryName = "/chat-t-2-l-1",
                            FirstUserId = 2L,
                            SecondUserId = 1L
                        },
                        new
                        {
                            Id = 3L,
                            DirectoryName = "/chat-t-2-l-2",
                            FirstUserId = 2L,
                            SecondUserId = 2L
                        });
                });

            modelBuilder.Entity("Placely.Data.Entities.Contract", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("FinalizedPathDocx")
                        .HasColumnType("text")
                        .HasColumnName("finalized_path_docx");

                    b.Property<string>("FinalizedPathPdf")
                        .HasColumnType("text")
                        .HasColumnName("finalized_path_pdf");

                    b.Property<long>("LandlordId")
                        .HasColumnType("bigint")
                        .HasColumnName("landlord_id");

                    b.Property<DateTime>("LeaseEndDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("lease_end_date_time");

                    b.Property<DateTime>("LeaseStartDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("lease_start_date_time");

                    b.Property<long>("PropertyId")
                        .HasColumnType("bigint")
                        .HasColumnName("property_id");

                    b.Property<string>("TemplateFieldsPath")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("Data/contracts/default/default_fields.json")
                        .HasColumnName("template_fields_path");

                    b.Property<string>("TemplatePath")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("Data/contracts/default/default_template.docx")
                        .HasColumnName("template_path");

                    b.Property<long>("TenantId")
                        .HasColumnType("bigint")
                        .HasColumnName("tenant_id");

                    b.HasKey("Id")
                        .HasName("pk_contracts");

                    b.HasIndex("LandlordId")
                        .HasDatabaseName("ix_contracts_landlord_id");

                    b.HasIndex("PropertyId")
                        .HasDatabaseName("ix_contracts_property_id");

                    b.HasIndex("TenantId")
                        .HasDatabaseName("ix_contracts_tenant_id");

                    b.ToTable("contracts", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            LandlordId = 1L,
                            LeaseEndDateTime = new DateTime(2024, 6, 3, 9, 29, 59, 28, DateTimeKind.Utc).AddTicks(808),
                            LeaseStartDateTime = new DateTime(2024, 4, 27, 9, 29, 59, 28, DateTimeKind.Utc).AddTicks(804),
                            PropertyId = 1L,
                            TenantId = 1L
                        },
                        new
                        {
                            Id = 2L,
                            LandlordId = 1L,
                            LeaseEndDateTime = new DateTime(2024, 5, 18, 9, 29, 59, 28, DateTimeKind.Utc).AddTicks(814),
                            LeaseStartDateTime = new DateTime(2024, 5, 4, 9, 29, 59, 28, DateTimeKind.Utc).AddTicks(814),
                            PropertyId = 2L,
                            TenantId = 2L
                        },
                        new
                        {
                            Id = 3L,
                            LandlordId = 2L,
                            LeaseEndDateTime = new DateTime(2024, 5, 5, 9, 29, 59, 28, DateTimeKind.Utc).AddTicks(816),
                            LeaseStartDateTime = new DateTime(2024, 5, 2, 9, 29, 59, 28, DateTimeKind.Utc).AddTicks(816),
                            PropertyId = 3L,
                            TenantId = 3L
                        });
                });

            modelBuilder.Entity("Placely.Data.Entities.Landlord", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("ContactAddress")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("contact_address");

                    b.Property<long>("TenantId")
                        .HasColumnType("bigint")
                        .HasColumnName("tenant_id");

                    b.HasKey("Id")
                        .HasName("pk_landlords");

                    b.HasIndex("TenantId")
                        .HasDatabaseName("ix_landlords_tenant_id");

                    b.ToTable("landlords", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            ContactAddress = "some address 1",
                            TenantId = 4L
                        },
                        new
                        {
                            Id = 2L,
                            ContactAddress = "some address 2",
                            TenantId = 5L
                        },
                        new
                        {
                            Id = 3L,
                            ContactAddress = "some address 3",
                            TenantId = 6L
                        });
                });

            modelBuilder.Entity("Placely.Data.Entities.Message", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("AuthorId")
                        .HasColumnType("bigint")
                        .HasColumnName("author_id");

                    b.Property<long>("ChatId")
                        .HasColumnType("bigint")
                        .HasColumnName("chat_id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("file_name");

                    b.HasKey("Id")
                        .HasName("pk_messages");

                    b.HasIndex("AuthorId")
                        .HasDatabaseName("ix_messages_author_id");

                    b.HasIndex("ChatId")
                        .HasDatabaseName("ix_messages_chat_id");

                    b.ToTable("messages", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            AuthorId = 1L,
                            ChatId = 1L,
                            Content = "message 1",
                            Date = new DateTime(2024, 5, 2, 9, 29, 59, 28, DateTimeKind.Utc).AddTicks(949),
                            FileName = ""
                        },
                        new
                        {
                            Id = 2L,
                            AuthorId = 4L,
                            ChatId = 1L,
                            Content = "message 2",
                            Date = new DateTime(2024, 5, 3, 9, 29, 59, 28, DateTimeKind.Utc).AddTicks(953),
                            FileName = ""
                        },
                        new
                        {
                            Id = 3L,
                            AuthorId = 2L,
                            ChatId = 2L,
                            Content = "message with file",
                            Date = new DateTime(2024, 4, 28, 9, 29, 59, 28, DateTimeKind.Utc).AddTicks(954),
                            FileName = "smt.txt"
                        });
                });

            modelBuilder.Entity("Placely.Data.Entities.Notification", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date")
                        .HasColumnName("date");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<long>("ReceiverId")
                        .HasColumnType("bigint")
                        .HasColumnName("receiver_id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.HasKey("Id")
                        .HasName("pk_notifications");

                    b.HasIndex("ReceiverId")
                        .HasDatabaseName("ix_notifications_receiver_id");

                    b.ToTable("notifications", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Content = "This is some helpful information",
                            Date = new DateOnly(2024, 5, 4),
                            IsDeleted = false,
                            ReceiverId = 2L,
                            Title = "Info"
                        },
                        new
                        {
                            Id = 2L,
                            Content = "This is some helpful information",
                            Date = new DateOnly(2024, 5, 4),
                            IsDeleted = false,
                            ReceiverId = 2L,
                            Title = "Info"
                        },
                        new
                        {
                            Id = 3L,
                            Content = "This is already readed some helpful information",
                            Date = new DateOnly(2024, 5, 4),
                            IsDeleted = false,
                            ReceiverId = 3L,
                            Title = "Info"
                        },
                        new
                        {
                            Id = 4L,
                            Content = "This is already readed some helpful information",
                            Date = new DateOnly(2024, 5, 4),
                            IsDeleted = true,
                            ReceiverId = 3L,
                            Title = "Info"
                        },
                        new
                        {
                            Id = 5L,
                            Content = "This is request on reservation",
                            Date = new DateOnly(2024, 5, 4),
                            IsDeleted = false,
                            ReceiverId = 4L,
                            Title = "Request"
                        },
                        new
                        {
                            Id = 6L,
                            Content = "This is readed request on reservation",
                            Date = new DateOnly(2024, 5, 4),
                            IsDeleted = true,
                            ReceiverId = 5L,
                            Title = "Request"
                        });
                });

            modelBuilder.Entity("Placely.Data.Entities.PreviousPassword", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("password");

                    b.Property<long>("TenantId")
                        .HasColumnType("bigint")
                        .HasColumnName("tenant_id");

                    b.HasKey("Id")
                        .HasName("pk_previous_passwords");

                    b.HasIndex("TenantId")
                        .HasDatabaseName("ix_previous_passwords_tenant_id");

                    b.ToTable("previous_passwords", (string)null);
                });

            modelBuilder.Entity("Placely.Data.Entities.PriceList", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("PeriodLong")
                        .HasColumnType("integer")
                        .HasColumnName("period_long");

                    b.Property<int>("PeriodMedium")
                        .HasColumnType("integer")
                        .HasColumnName("period_medium");

                    b.Property<int>("PeriodShort")
                        .HasColumnType("integer")
                        .HasColumnName("period_short");

                    b.HasKey("Id")
                        .HasName("pk_prices");

                    b.ToTable("prices", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            PeriodLong = 11,
                            PeriodMedium = 111,
                            PeriodShort = 1111
                        },
                        new
                        {
                            Id = 2L,
                            PeriodLong = 22,
                            PeriodMedium = 222,
                            PeriodShort = 2222
                        },
                        new
                        {
                            Id = 3L,
                            PeriodLong = 33,
                            PeriodMedium = 333,
                            PeriodShort = 3333
                        });
                });

            modelBuilder.Entity("Placely.Data.Entities.Property", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("address");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<long?>("LandlordId")
                        .HasColumnType("bigint")
                        .HasColumnName("landlord_id");

                    b.Property<long>("OwnerId")
                        .HasColumnType("bigint")
                        .HasColumnName("owner_id");

                    b.Property<long>("PriceListId")
                        .HasColumnType("bigint")
                        .HasColumnName("price_list_id");

                    b.Property<DateTime>("PublicationDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("publication_date");

                    b.Property<double>("Rating")
                        .HasColumnType("double precision")
                        .HasColumnName("rating");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.HasKey("Id")
                        .HasName("pk_properties");

                    b.HasIndex("LandlordId")
                        .HasDatabaseName("ix_properties_landlord_id");

                    b.HasIndex("OwnerId")
                        .HasDatabaseName("ix_properties_owner_id");

                    b.HasIndex("PriceListId")
                        .IsUnique()
                        .HasDatabaseName("ix_properties_price_list_id");

                    b.ToTable("properties", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Address = "Flat property address",
                            Description = "Flat property description",
                            OwnerId = 1L,
                            PriceListId = 1L,
                            PublicationDate = new DateTime(2024, 5, 3, 9, 29, 59, 28, DateTimeKind.Utc).AddTicks(760),
                            Rating = 0.0,
                            Type = 2
                        },
                        new
                        {
                            Id = 2L,
                            Address = "Hostel property address",
                            Description = "Hostel property description",
                            OwnerId = 1L,
                            PriceListId = 2L,
                            PublicationDate = new DateTime(2024, 4, 4, 9, 29, 59, 28, DateTimeKind.Utc).AddTicks(772),
                            Rating = 0.0,
                            Type = 0
                        },
                        new
                        {
                            Id = 3L,
                            Address = "Villa property address",
                            Description = "Villa property description",
                            OwnerId = 2L,
                            PriceListId = 3L,
                            PublicationDate = new DateTime(2024, 3, 5, 9, 29, 59, 28, DateTimeKind.Utc).AddTicks(774),
                            Rating = 0.0,
                            Type = 3
                        });
                });

            modelBuilder.Entity("Placely.Data.Entities.Reservation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreationDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("creation_date_time");

                    b.Property<string>("DeclineReason")
                        .HasColumnType("text")
                        .HasColumnName("decline_reason");

                    b.Property<TimeSpan>("Duration")
                        .HasColumnType("interval")
                        .HasColumnName("duration");

                    b.Property<DateTime>("EntryDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("entry_date");

                    b.Property<byte>("GuestsAmount")
                        .HasColumnType("smallint")
                        .HasColumnName("guests_amount");

                    b.Property<long>("LandlordId")
                        .HasColumnType("bigint")
                        .HasColumnName("landlord_id");

                    b.Property<long>("PropertyId")
                        .HasColumnType("bigint")
                        .HasColumnName("property_id");

                    b.Property<int>("ReservationStatus")
                        .HasColumnType("integer")
                        .HasColumnName("reservation_status");

                    b.Property<long>("TenantId")
                        .HasColumnType("bigint")
                        .HasColumnName("tenant_id");

                    b.HasKey("Id")
                        .HasName("pk_reservations");

                    b.HasIndex("LandlordId")
                        .HasDatabaseName("ix_reservations_landlord_id");

                    b.HasIndex("PropertyId")
                        .HasDatabaseName("ix_reservations_property_id");

                    b.HasIndex("TenantId")
                        .HasDatabaseName("ix_reservations_tenant_id");

                    b.ToTable("reservations", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreationDateTime = new DateTime(2024, 4, 14, 9, 29, 59, 28, DateTimeKind.Utc).AddTicks(838),
                            Duration = new TimeSpan(37, 0, 0, 0, 0),
                            EntryDate = new DateTime(2024, 4, 27, 9, 29, 59, 28, DateTimeKind.Utc).AddTicks(840),
                            GuestsAmount = (byte)3,
                            LandlordId = 1L,
                            PropertyId = 1L,
                            ReservationStatus = 3,
                            TenantId = 1L
                        },
                        new
                        {
                            Id = 2L,
                            CreationDateTime = new DateTime(2024, 5, 1, 9, 29, 59, 28, DateTimeKind.Utc).AddTicks(876),
                            Duration = new TimeSpan(14, 0, 0, 0, 0),
                            EntryDate = new DateTime(2024, 5, 4, 9, 29, 59, 28, DateTimeKind.Utc).AddTicks(877),
                            GuestsAmount = (byte)1,
                            LandlordId = 1L,
                            PropertyId = 2L,
                            ReservationStatus = 3,
                            TenantId = 2L
                        },
                        new
                        {
                            Id = 3L,
                            CreationDateTime = new DateTime(2024, 5, 1, 9, 29, 59, 28, DateTimeKind.Utc).AddTicks(878),
                            Duration = new TimeSpan(3, 0, 0, 0, 0),
                            EntryDate = new DateTime(2024, 5, 2, 9, 29, 59, 28, DateTimeKind.Utc).AddTicks(879),
                            GuestsAmount = (byte)2,
                            LandlordId = 2L,
                            PropertyId = 3L,
                            ReservationStatus = 3,
                            TenantId = 3L
                        },
                        new
                        {
                            Id = 4L,
                            CreationDateTime = new DateTime(2024, 5, 4, 9, 29, 59, 28, DateTimeKind.Utc).AddTicks(882),
                            Duration = new TimeSpan(10, 0, 0, 0, 0),
                            EntryDate = new DateTime(2024, 5, 8, 9, 29, 59, 28, DateTimeKind.Utc).AddTicks(882),
                            GuestsAmount = (byte)3,
                            LandlordId = 1L,
                            PropertyId = 2L,
                            ReservationStatus = 1,
                            TenantId = 1L
                        },
                        new
                        {
                            Id = 5L,
                            CreationDateTime = new DateTime(2024, 4, 24, 9, 29, 59, 28, DateTimeKind.Utc).AddTicks(884),
                            DeclineReason = "too many guests",
                            Duration = new TimeSpan(10, 0, 0, 0, 0),
                            EntryDate = new DateTime(2024, 5, 8, 9, 29, 59, 28, DateTimeKind.Utc).AddTicks(885),
                            GuestsAmount = (byte)34,
                            LandlordId = 2L,
                            PropertyId = 3L,
                            ReservationStatus = 4,
                            TenantId = 3L
                        },
                        new
                        {
                            Id = 6L,
                            CreationDateTime = new DateTime(2024, 4, 24, 9, 29, 59, 28, DateTimeKind.Utc).AddTicks(888),
                            Duration = new TimeSpan(10, 0, 0, 0, 0),
                            EntryDate = new DateTime(2024, 5, 8, 9, 29, 59, 28, DateTimeKind.Utc).AddTicks(889),
                            GuestsAmount = (byte)2,
                            LandlordId = 2L,
                            PropertyId = 3L,
                            ReservationStatus = 2,
                            TenantId = 1L
                        });
                });

            modelBuilder.Entity("Placely.Data.Entities.Review", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("AuthorId")
                        .HasColumnType("bigint")
                        .HasColumnName("author_id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date");

                    b.Property<long>("PropertyId")
                        .HasColumnType("bigint")
                        .HasColumnName("property_id");

                    b.Property<double>("Rating")
                        .HasColumnType("double precision")
                        .HasColumnName("rating");

                    b.HasKey("Id")
                        .HasName("pk_reviews");

                    b.HasIndex("AuthorId")
                        .HasDatabaseName("ix_reviews_author_id");

                    b.HasIndex("PropertyId")
                        .HasDatabaseName("ix_reviews_property_id");

                    b.ToTable("reviews", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            AuthorId = 1L,
                            Content = "review 1",
                            Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PropertyId = 1L,
                            Rating = 1.0
                        },
                        new
                        {
                            Id = 2L,
                            AuthorId = 2L,
                            Content = "review 2",
                            Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PropertyId = 2L,
                            Rating = 2.0
                        },
                        new
                        {
                            Id = 3L,
                            AuthorId = 3L,
                            Content = "review 3",
                            Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PropertyId = 3L,
                            Rating = 3.0
                        },
                        new
                        {
                            Id = 4L,
                            AuthorId = 4L,
                            Content = "review 4",
                            Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PropertyId = 1L,
                            Rating = 4.0
                        },
                        new
                        {
                            Id = 5L,
                            AuthorId = 5L,
                            Content = "review 5",
                            Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PropertyId = 2L,
                            Rating = 5.0
                        });
                });

            modelBuilder.Entity("Placely.Data.Entities.Tenant", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("About")
                        .HasColumnType("text")
                        .HasColumnName("about");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<bool>("IsAdditionalRegistrationRequired")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_additional_registration_required");

                    b.Property<bool>("IsTwoFactorEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_two_factor_enabled");

                    b.Property<string>("ManualEntryKey")
                        .HasColumnType("text")
                        .HasColumnName("manual_entry_key");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("password");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("phone_number");

                    b.Property<string>("QrImageUrl")
                        .HasColumnType("text")
                        .HasColumnName("qr_image_url");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("text")
                        .HasColumnName("refresh_token");

                    b.Property<DateTime>("RefreshTokenExpirationDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("refresh_token_expiration_date");

                    b.Property<string>("TwoFactorAccountSecretKey")
                        .HasColumnType("text")
                        .HasColumnName("two_factor_account_secret_key");

                    b.Property<int?>("UserRole")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1)
                        .HasColumnName("user_role");

                    b.Property<string>("Work")
                        .HasColumnType("text")
                        .HasColumnName("work");

                    b.HasKey("Id")
                        .HasName("pk_tenants");

                    b.ToTable("tenants", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            About = "I'm test tenant 1",
                            Email = "test.tenant.1@email.domen",
                            IsAdditionalRegistrationRequired = false,
                            IsTwoFactorEnabled = false,
                            Name = "Test tenant 1",
                            Password = "test.tenant.1@email.domen",
                            PhoneNumber = "111 1111 11 11",
                            RefreshTokenExpirationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Work = "I'm working nowhere"
                        },
                        new
                        {
                            Id = 2L,
                            About = "I'm test tenant 2",
                            Email = "test.tenant.2@email.domen",
                            IsAdditionalRegistrationRequired = false,
                            IsTwoFactorEnabled = false,
                            Name = "Test tenant 2",
                            Password = "test.tenant.2@email.domen",
                            PhoneNumber = "222 2222 22 22",
                            RefreshTokenExpirationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Work = "I'm working nowhere"
                        },
                        new
                        {
                            Id = 3L,
                            About = "I'm test tenant 3",
                            Email = "test.tenant.3@email.domen",
                            IsAdditionalRegistrationRequired = false,
                            IsTwoFactorEnabled = false,
                            Name = "Test tenant 3",
                            Password = "test.tenant.3@email.domen",
                            PhoneNumber = "333 3333 33 33",
                            RefreshTokenExpirationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Work = "I'm working nowhere"
                        },
                        new
                        {
                            Id = 4L,
                            About = "I'm test landlord 1",
                            Email = "test.landlord.1@email.domen",
                            IsAdditionalRegistrationRequired = false,
                            IsTwoFactorEnabled = false,
                            Name = "Test landlord 1",
                            Password = "test.landlord.1@email.domen",
                            PhoneNumber = "111 1111 11 11",
                            RefreshTokenExpirationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Work = "I'm working here"
                        },
                        new
                        {
                            Id = 5L,
                            About = "I'm test landlord 2",
                            Email = "test.landlord.2@email.domen",
                            IsAdditionalRegistrationRequired = false,
                            IsTwoFactorEnabled = false,
                            Name = "Test landlord 2",
                            Password = "test.landlord.2@email.domen",
                            PhoneNumber = "222 2222 22 22",
                            RefreshTokenExpirationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Work = "I'm working here"
                        },
                        new
                        {
                            Id = 6L,
                            About = "I'm test landlord 3",
                            Email = "test.landlord.3@email.domen",
                            IsAdditionalRegistrationRequired = false,
                            IsTwoFactorEnabled = false,
                            Name = "Test landlord 3",
                            Password = "test.landlord.3@email.domen",
                            PhoneNumber = "333 3333 33 33",
                            RefreshTokenExpirationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Work = "I'm working here"
                        });
                });

            modelBuilder.Entity("PropertyTenant", b =>
                {
                    b.Property<long>("FavouriteId")
                        .HasColumnType("bigint")
                        .HasColumnName("favourite_id");

                    b.Property<long>("InFavouritesId")
                        .HasColumnType("bigint")
                        .HasColumnName("in_favourites_id");

                    b.HasKey("FavouriteId", "InFavouritesId")
                        .HasName("pk_property_tenant");

                    b.HasIndex("InFavouritesId")
                        .HasDatabaseName("ix_property_tenant_in_favourites_id");

                    b.ToTable("property_tenant", (string)null);
                });

            modelBuilder.Entity("Placely.Data.Entities.Chat", b =>
                {
                    b.HasOne("Placely.Data.Entities.Tenant", "FirstUser")
                        .WithMany()
                        .HasForeignKey("FirstUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_chats_tenants_first_user_id");

                    b.HasOne("Placely.Data.Entities.Landlord", null)
                        .WithMany("Chats")
                        .HasForeignKey("LandlordId")
                        .HasConstraintName("fk_chats_landlords_landlord_id");

                    b.HasOne("Placely.Data.Entities.Tenant", "SecondUser")
                        .WithMany()
                        .HasForeignKey("SecondUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_chats_tenants_second_user_id");

                    b.HasOne("Placely.Data.Entities.Tenant", null)
                        .WithMany("Chats")
                        .HasForeignKey("TenantId")
                        .HasConstraintName("fk_chats_tenants_tenant_id");

                    b.Navigation("FirstUser");

                    b.Navigation("SecondUser");
                });

            modelBuilder.Entity("Placely.Data.Entities.Contract", b =>
                {
                    b.HasOne("Placely.Data.Entities.Landlord", "Landlord")
                        .WithMany("Contracts")
                        .HasForeignKey("LandlordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_contracts_landlords_landlord_id");

                    b.HasOne("Placely.Data.Entities.Property", "Property")
                        .WithMany("Contracts")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_contracts_properties_property_id");

                    b.HasOne("Placely.Data.Entities.Tenant", "Tenant")
                        .WithMany("Contracts")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_contracts_tenants_tenant_id");

                    b.Navigation("Landlord");

                    b.Navigation("Property");

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("Placely.Data.Entities.Landlord", b =>
                {
                    b.HasOne("Placely.Data.Entities.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_landlords_tenants_tenant_id");

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("Placely.Data.Entities.Message", b =>
                {
                    b.HasOne("Placely.Data.Entities.Tenant", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_messages_tenants_author_id");

                    b.HasOne("Placely.Data.Entities.Chat", "Chat")
                        .WithMany("Messages")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_messages_chats_chat_id");

                    b.Navigation("Author");

                    b.Navigation("Chat");
                });

            modelBuilder.Entity("Placely.Data.Entities.Notification", b =>
                {
                    b.HasOne("Placely.Data.Entities.Tenant", "Receiver")
                        .WithMany("Notifications")
                        .HasForeignKey("ReceiverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_notifications_tenants_receiver_id");

                    b.Navigation("Receiver");
                });

            modelBuilder.Entity("Placely.Data.Entities.PreviousPassword", b =>
                {
                    b.HasOne("Placely.Data.Entities.Tenant", "Tenant")
                        .WithMany("PreviousPasswords")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_previous_passwords_tenants_tenant_id");

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("Placely.Data.Entities.Property", b =>
                {
                    b.HasOne("Placely.Data.Entities.Landlord", null)
                        .WithMany("Properties")
                        .HasForeignKey("LandlordId")
                        .HasConstraintName("fk_properties_landlords_landlord_id");

                    b.HasOne("Placely.Data.Entities.Tenant", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_properties_tenants_owner_id");

                    b.HasOne("Placely.Data.Entities.PriceList", "PriceList")
                        .WithMany()
                        .HasForeignKey("PriceListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_properties_prices_price_list_id");

                    b.Navigation("Owner");

                    b.Navigation("PriceList");
                });

            modelBuilder.Entity("Placely.Data.Entities.Reservation", b =>
                {
                    b.HasOne("Placely.Data.Entities.Landlord", "Landlord")
                        .WithMany("Reservations")
                        .HasForeignKey("LandlordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_reservations_landlords_landlord_id");

                    b.HasOne("Placely.Data.Entities.Property", "Property")
                        .WithMany("Reservations")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_reservations_properties_property_id");

                    b.HasOne("Placely.Data.Entities.Tenant", "Tenant")
                        .WithMany("Reservations")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_reservations_tenants_tenant_id");

                    b.Navigation("Landlord");

                    b.Navigation("Property");

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("Placely.Data.Entities.Review", b =>
                {
                    b.HasOne("Placely.Data.Entities.Tenant", "Author")
                        .WithMany("Reviews")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_reviews_tenants_author_id");

                    b.HasOne("Placely.Data.Entities.Property", "Property")
                        .WithMany("Reviews")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_reviews_properties_property_id");

                    b.Navigation("Author");

                    b.Navigation("Property");
                });

            modelBuilder.Entity("PropertyTenant", b =>
                {
                    b.HasOne("Placely.Data.Entities.Property", null)
                        .WithMany()
                        .HasForeignKey("FavouriteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_property_tenant_properties_favourite_id");

                    b.HasOne("Placely.Data.Entities.Tenant", null)
                        .WithMany()
                        .HasForeignKey("InFavouritesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_property_tenant_tenants_in_favourites_id");
                });

            modelBuilder.Entity("Placely.Data.Entities.Chat", b =>
                {
                    b.Navigation("Messages");
                });

            modelBuilder.Entity("Placely.Data.Entities.Landlord", b =>
                {
                    b.Navigation("Chats");

                    b.Navigation("Contracts");

                    b.Navigation("Properties");

                    b.Navigation("Reservations");
                });

            modelBuilder.Entity("Placely.Data.Entities.Property", b =>
                {
                    b.Navigation("Contracts");

                    b.Navigation("Reservations");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("Placely.Data.Entities.Tenant", b =>
                {
                    b.Navigation("Chats");

                    b.Navigation("Contracts");

                    b.Navigation("Notifications");

                    b.Navigation("PreviousPasswords");

                    b.Navigation("Reservations");

                    b.Navigation("Reviews");
                });
#pragma warning restore 612, 618
        }
    }
}
